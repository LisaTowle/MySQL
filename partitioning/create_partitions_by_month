delimiter //

CREATE PROCEDURE create_partitions_by_month
(IN int_id int(11),
IN in_table_schema varchar(64),
IN in_table_name varchar(64),
IN in_partition_begin_month varchar(7),
IN in_partition_end_month varchar(7),
IN in_partitioning_key varchar(64),
IN in_dry_run tinyint)

ProcExit:BEGIN

  DECLARE loop_cnt tinyint;
  DECLARE max_value varchar(8);
  DECLARE begin_partition varchar(64);
  DECLARE end_partition varchar(64);
  DECLARE begin_partition_date date;
  DECLARE end_partition_date date;
  DECLARE max_partition_name varchar(64);
  DECLARE last_partition_name varchar(64);
  DECLARE next_partition_date date;
  DECLARE new_partition_name varchar(64);
  DECLARE new_partition_date date;


  if in_dry_run = 0 THEN
     select 'Actual run';
  else
     select 'Dry run';
  end if; 

  If in_partition_begin_month not regexp '[20][0-9][0-9][_][01-12]' THEN
     select 'ERROR: Begin month not in format YYYY_MM';
     LEAVE ProcExit;
  end if;

  If in_partition_end_month not regexp '[20][0-9][0-9][_][01-12]' THEN
     select 'ERROR: End month not in format YYYY_MM';
     LEAVE ProcExit;
  end if;

  if in_partition_begin_month > in_partition_end_month THEN
     select 'ERROR: Begin month is greater than end month';
     LEAVE ProcExit;
  end if;


  SET begin_partition = CONCAT('PART_' , in_table_name , '_' , in_partition_begin_month);
  SET end_partition   = CONCAT('PART_' , in_table_name , '_' , in_partition_end_month);
  SET begin_partition_date = str_to_date(concat(SUBSTR(in_partition_begin_month,1,4),'-',SUBSTR(in_partition_begin_month,6,2),'-01'),'%Y-%m-%d');
  SET end_partition_date = str_to_date(concat(SUBSTR(in_partition_end_month,1,4),'-',SUBSTR(in_partition_end_month,6,2),'-01'),'%Y-%m-%d');

  SET max_value = 'MAXVALUE';

  select partition_name into max_partition_name
  from information_schema.partitions
  where table_schema = in_table_schema
  and table_name = in_table_name
  and partition_description = max_value;

  select max(partition_name) into last_partition_name
  from information_schema.partitions
  where table_schema = in_table_schema
  and table_name = in_table_name
  and partition_description != max_value;

  if begin_partition <= last_partition_name THEN
     select 'ERROR: Begin partition month is earlier than current last partition ', last_partition_name;
     LEAVE ProcExit;
  end if;

  SET loop_cnt = 0;
  SET next_partition_date = begin_partition_date;

  while next_partition_date <= end_partition_date do

      SET new_partition_name = CONCAT('PART_' , in_table_name , '_' , date_format(next_partition_date,'%Y_%m'));
      SET new_partition_date = DATE_ADD(next_partition_date, INTERVAL 1 month);

      select concat('ALTER TABLE ',
                   in_table_schema,
                   '.',
                   in_table_name,
                   ' REORGANIZE PARTITION  ',
                   max_partition_name,
                   ' INTO (PARTITION ',
                   new_partition_name,
                   ' VALUES LESS THAN (''',
                   new_partition_date,
                   '''), PARTITION ',
                   max_partition_name,
                   ' VALUES LESS THAN (MAXVALUE));')
      into @alter_text;
      SELECT @alter_text;

      if in_dry_run = 0 THEN
          prepare stmt from @alter_text;
          execute stmt; 
      end if; 

      SET loop_cnt = loop_cnt + 1;
      SET next_partition_date = DATE_ADD(next_partition_date, INTERVAL 1 month);

  end while;

END
//

delimiter ;
